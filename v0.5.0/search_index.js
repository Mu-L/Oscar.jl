var documenterSearchIndex = {"docs":
[{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"CurrentModule = Oscar","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"using Oscar","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Pages = [\"rational.md\"]","category":"page"},{"location":"Rings/rational/#Rationals","page":"Rationals","title":"Rationals","text":"","category":"section"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Fractions are created in Julia with the double slash operator //. If a fraction is created from Julia integers, a Julia fraction results and if either the numerator or denominator is an Oscar integer, an Oscar fraction results.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Oscar has just a single rational fraction type Oscar.fmpq. The Oscar fraction type belongs to Oscar.Rational.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Julia has a parameterised type Base.Rational{T} for its own fractions, where T is the integer type the fractions are constructed from, e.g. Base.Rational{Int} and Base.Rational{BigInt}.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Note that conveniently, both of these Julia rational types belong to Base.Rational. Therefore in the description below we refer to Oscar.Rational for Oscar rational numbers and Base.Rational for any of the Julia rational number types.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"The situation is described by the following diagram.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"(Image: alt text)","category":"page"},{"location":"Rings/rational/#The-field-of-rationals","page":"Rationals","title":"The field of rationals","text":"","category":"section"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"The parent of an Oscar rational number is the field of rationals. It can be constructed from the ring of integers ZZ using the FractionField constructor.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"For convenience, QQ is already defined to be the field of rational numbers.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"S = FractionField(ZZ)\nQQ","category":"page"},{"location":"Rings/rational/#Integer-constructors","page":"Rationals","title":"Integer constructors","text":"","category":"section"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Oscar rationals can be created using QQ. Two arguments can be passed to specify numerator and denominator. If a single argument is passed, the denominator is set to 1.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"For convenience, QQ also accepts Julia integers and rationals, but will always construct an Oscar rational.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Naturally, Julia's double slash operator can also be used to construct fractions. However, unlike QQ, the double slash operator only constructs an Oscar rational if either the numerator or denominator is an Oscar integer.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"An exception is raised if a fraction is constructed with denominator zero.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"QQ(1, 2)\nQQ(5)\nZZ(3)//5\n1//ZZ(7)\nQQ(2//3)\nZZ(3)//0","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"One can also construct the rational number 0 with the empty constructor:","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"QQ()","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"The following special constructors are also provided:","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"zero(QQ)\none(QQ)","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"zero(QQ)\none(QQ)","category":"page"},{"location":"Rings/rational/#Predicates","page":"Rationals","title":"Predicates","text":"","category":"section"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"iszero(n::Oscar.Rational) -> Bool\nisone(n::Oscar.Rational) -> Bool\nisunit(n::Oscar.Rational) -> Bool","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"The isunit function will return true iff n neq 0.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"iszero(QQ())\nisone(one(QQ))\nisunit(QQ(-2, 3))","category":"page"},{"location":"Rings/rational/#Properties","page":"Rationals","title":"Properties","text":"","category":"section"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"numerator(n::Oscar.Rational) -> Oscar.Integer\ndenominator(n::Oscar.Rational) -> Oscar.Integer","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Return the numerator and denominator respectively, of n.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"sign(n::Oscar.Rational) -> Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Returns the sign of n, i.e. nn if n neq 0, or 0 otherwise.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"sign(QQ(2, 3))\nsign(QQ())\nsign(QQ(-1))","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"abs(n::Oscar.Rational) -> Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Return the absolute value of n, i.e. n if n geq 0 and -n otherwise.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"abs(QQ(-3, 2))","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"height(n::Oscar.Rational) -> Oscar.Integer","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Return the maximum of the absolute values of the numerator and denominator of n.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"height(QQ(324987329, -8372492324))","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"floor(n::Oscar.Rational) -> Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Return the greatest integer m (as a rational number) such that m leq n.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"ceil(n::Oscar.Rational) -> Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Return the least integer m (as a rational number) such that m geq n.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"floor(QQ(-2, 3))\nceil(QQ(7, 2))\ntypeof(ans)\nceil(QQ(5))","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"floor(Oscar.Integer, n::Oscar.Rational) -> Oscar.Integer","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Return the greatest integer m such that m leq n.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"ceil(Oscar.Integer, n::Oscar.Rational) -> Oscar.Integer","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Return the least integer m such that m geq n.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"floor(Oscar.Integer, QQ(-2, 3))\nceil(Oscar.Integer, QQ(7, 2))\ntypeof(ans)\nceil(Oscar.Integer, QQ(5))","category":"page"},{"location":"Rings/rational/#Basic-arithmetic","page":"Rationals","title":"Basic arithmetic","text":"","category":"section"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Oscar provides the basic arithmetic operations +, - and * and comparison operators ==, !=, <, <=, >, >=, including mixed operations between Julia and Oscar rationals and integers.","category":"page"},{"location":"Rings/rational/#[Exact-Division]","page":"Rationals","title":"[Exact Division]","text":"","category":"section"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"divexact(a::Oscar.Rational, b::Oscar.Rational) -> Oscar.Rational\ndivexact(a::Oscar.Rational, b::Oscar.Integer) -> Oscar.Rational\ndivexact(a::Oscar.Integer, b::Oscar.Rational) -> Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"In the first signature, one of the arguments may be a Julia rational and in the other two signatures the integers may be Julia integers.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Returns the quotient of a by b. Exact division raises an exception if division by zero is attempted.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"divexact(QQ(2, 3), QQ(3, 5))\ndivexact(QQ(1, 3), ZZ(0))\ndivexact(QQ(3, 4), ZZ(5))\ndivexact(ZZ(6), QQ(2, 3))\ndivexact(QQ(1, 3), 5)","category":"page"},{"location":"Rings/rational/#Powering","page":"Rationals","title":"Powering","text":"","category":"section"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"^(a::Oscar.Rational, b::Base.Int) -> Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Powering can be accomplished naturally using the special caret infix operator:","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"QQ(5, 7)^32\nQQ(1, 2)^(-2)","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"The following is allowed for convenience.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"QQ(0)^0","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"note: Note\nIn Julia, the rational number 01 when raised to a negative power returns 10 to indicate that the value is undefined. Oscar raises an exception.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"QQ(0)^-2","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"ispower(a::Oscar.Rational, b::Base.Int) -> Bool, Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Tests if a is an n-th power. If so, return true and the root, false and any rational otherwise.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"ispower(a::Oscar.Rational) -> Int, Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Finds the largest n such that a is an n-th power. Return n and the root.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"root(a::Oscar.Rational, b::Base.Int) -> Oscar.Rational","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"Computes an n-th root of a, raises an error if a is not an n-th power.","category":"page"},{"location":"Rings/rational/","page":"Rationals","title":"Rationals","text":"ispower(QQ(8), 3)\nispower(QQ(8), 2)\nispower(QQ(9//16))\nroot(QQ(25//9), 2)","category":"page"},{"location":"#Welcome-to-Oscar","page":"Welcome to Oscar","title":"Welcome to Oscar","text":"","category":"section"},{"location":"","page":"Welcome to Oscar","title":"Welcome to Oscar","text":"Oscar is a new computer algebra system under development.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"CurrentModule = Oscar","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"using Oscar","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Pages = [\"integer.md\"]","category":"page"},{"location":"Rings/integer/#Integers","page":"Integers","title":"Integers","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"An important design decision in Oscar.jl is to use Julia as the user language by default. This means that integers typed at the REPL are Julia integers. However, for performance reasons, Oscar has its own integer format.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Julia has a number of different integer types, but the two that are most relevant here are Base.Int and Base.BigInt. All the Julia integer types belong to Base.Integer.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The Base.Int type is for machine integers which are highly efficient, but can only represent integers up to a certain hardware defined size before wrapping around.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The Base.BigInt type is backed by GMP multiprecision integers and can represent integers whose size is usually only limited by available memory.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Oscar currently only has one integer type, Oscar.fmpz which for performance reasons scales internally from machine integers to GMP multiprecision integers. The Oscar integer type belongs to Oscar.Integer.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"This situation is illustrated in the following diagram.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"(Image: alt text)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"In the documentation below, we always use Base.Integer for a Julia integer and Oscar.Integer for an Oscar integer. Some functions accept only machine integers for certain arguments; in such cases, we refer to Base.Int.","category":"page"},{"location":"Rings/integer/#The-ring-of-integers","page":"Integers","title":"The ring of integers","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Every object in Oscar representing a mathematical element has a parent. This is an object encoding information about where that element belongs.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The parent of an Oscar integer is the ring of integers ZZ.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"ZZ","category":"page"},{"location":"Rings/integer/#Integer-constructors","page":"Integers","title":"Integer constructors","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Oscar integers are created using ZZ:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"ZZ(2)^100\nZZ(618970019642690137449562111)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"One can also construct the integer 0 with the empty constructor:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"ZZ()","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The following special constructors are also provided:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"zero(ZZ)\none(ZZ)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"zero(ZZ)\none(ZZ)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Note that ZZ is not a Julia type, but the above methods of constructing Oscar integers are similar to the way that Julia integer types can be used to construct Julia integers.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Int(123)\nBigInt(123456343567843598776327698374259876295438725)\nzero(BigInt)\none(Int)","category":"page"},{"location":"Rings/integer/#Limitations","page":"Integers","title":"Limitations","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Oscar integers have the same limitations as GMP multiprecision integers, namely that they are limited by the available memory on the machine and in any case to signed integers whose absolute value does not exceed 2^37 bits.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nThe Julia Int type is either a 32 or 64 bit integer, depending on the machine architecture (usually 64 bits on most modern machines). The range of values is machine dependent, but can be found by typing typemin(Int) and typemax(Int) in Julia.","category":"page"},{"location":"Rings/integer/#Julia-integers-in-Oscar-functions","page":"Integers","title":"Julia integers in Oscar functions","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"For convenience, all basic arithmetic and exact division functions in Oscar also accept Julia integers. For example:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divexact(ZZ(234), 2)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"In this example, 2 is a Julia integer but is still valid in the call to the Oscar function divexact.","category":"page"},{"location":"Rings/integer/#Predicates","page":"Integers","title":"Predicates","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"iszero(n::Oscar.Integer) -> Bool\nisone(n::Oscar.Integer) -> Bool\nisunit(n::Oscar.Integer) -> Bool\nisodd(n::Oscar.Integer) -> Bool\niseven(n::Oscar.Integer) -> Bool\nissquare(n::Oscar.Integer) -> Bool\nisprime(n::Oscar.Integer) -> Bool\nisprobable_prime(n::Oscar.Integer) -> Bool","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The isprime predicate will prove primality, whereas isprobable_prime may declare a composite number to be prime with very low probability.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Negative numbers, 0 and 1 are not considered prime by isprime and isprobable_prime.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"isone(ZZ(1))\nisunit(ZZ(-1))\nissquare(ZZ(16))\nisprobable_prime(ZZ(23))","category":"page"},{"location":"Rings/integer/#Properties","page":"Integers","title":"Properties","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"sign(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the sign of n, i.e. nn if n neq 0, or 0 otherwise.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"sign(ZZ(23))\nsign(ZZ(0))\nsign(ZZ(-1))","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"abs(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Return the absolute value of n, i.e. n if n geq 0 and -n otherwise","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"abs(ZZ(-3))","category":"page"},{"location":"Rings/integer/#Basic-arithmetic","page":"Integers","title":"Basic arithmetic","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Oscar provides the basic arithmetic operations +, - and * and comparison operators ==, !=, <, <=, >, >=, including mixed operations between Julia and Oscar integers. It also provides division and powering as described below.","category":"page"},{"location":"Rings/integer/#Division-in-Oscar","page":"Integers","title":"Division in Oscar","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Oscar distinguishes a number of different kinds of division:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Exact division (divexact)\nEuclidean division (div, rem, divrem and mod)\nConstruction of fractions (a//b)\nFloating point division (a/b)\nDivisibility testing (divides)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"These choices have been made for maximum parsimony with the Julia language.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nIt is a common error to enter 1/2 for the fraction 'one half' in Julia. This expression is reserved for floating point division. Instead, the double slash operator // should be used for fractions.","category":"page"},{"location":"Rings/integer/#integer_exact_division","page":"Integers","title":"Exact Division","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divexact(a::Oscar.Integer, b::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"One or both arguments may be Julia integers, however if they both are, the result will be a Julia integer not an Oscar integer.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the quotient of a by b. The result of the exact division of two integers will always be another integer. Exact division raises an exception if the division is not exact, or if division by zero is attempted.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divexact(ZZ(6), ZZ(3))\ndivexact(ZZ(6), ZZ(0))\ndivexact(ZZ(6), ZZ(5))\ndivexact(ZZ(6), 2)","category":"page"},{"location":"Rings/integer/#Powering","page":"Integers","title":"Powering","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"^(a::Oscar.Integer, b::Base.Int) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Powering can be accomplished naturally using the special caret infix operator:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"ZZ(37)^37\nZZ(1)^(-2)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nAn exception will be raised if an integer other than -1 or 1 is raised to a negative exponent.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nIn Julia 2^-2 is called a literal power. The value returned is a floating point value. To get behaviour that agrees with Oscar, one can write 2^Int(-2).","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The following is allowed for convenience.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"ZZ(0)^0","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nIn Julia, 2^64 will return zero, as the Julia integer 2 is a machine integer. In Oscar, the expression ZZ(2)^64 will return the expected result, just as the Julia equivalent BigInt(2)^64 does.","category":"page"},{"location":"Rings/integer/#integer_euclidean_division","page":"Integers","title":"Euclidean division","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The ring of integers is a Euclidean domain and Oscar provides Euclidean division through the functions divrem, div and rem.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Integer Euclidean division of a by b computes a quotient and remainder such that","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"a = qb + r","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"with r  b.","category":"page"},{"location":"Rings/integer/#Division-with-remainder","page":"Integers","title":"Division with remainder","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divrem(a::Oscar.Integer, b::Oscar.Integer) -> (Oscar.Integer, Oscar.Integer) : division with remainder\ndiv(a::Oscar.Integer, b::Oscar.Integer) -> Oscar.Integer : quotient only\nrem(a::Oscar.Integer, b::Oscar.Integer) -> Oscar.Integer : remainder only","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"One or both arguments may be Julia integers, however if they both are, the result will be a Julia integer not an Oscar integer.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Both rem and divrem compute the remainder r such that when r neq 0 the sign of r is the same as the sign of a.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"All three functions raise an exception if the modulus b is zero.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divrem(ZZ(5), ZZ(3))\ndiv(ZZ(7), ZZ(2))\nrem(ZZ(4), ZZ(3))\ndiv(ZZ(2), ZZ(0))","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nThe rem function does not provide a minimal set of representatives, e.g. rem(-2, 3) = -2 but rem(1, 3) = 1.","category":"page"},{"location":"Rings/integer/#Modular-arithmetic","page":"Integers","title":"Modular arithmetic","text":"","category":"section"},{"location":"Rings/integer/#Modular-reduction","page":"Integers","title":"Modular reduction","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"mod(a::Oscar.Integer, b::Oscar.Integer) -> Oscar.Integer : remainder only","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"One or both arguments may be Julia integers, however if they both are, the result will be a Julia integer not an Oscar integer.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The mod function computes a remainder r such that when r neq 0 the sign of r is the same as the sign of b. Thus, if b  0 then mod(a, b) will be in the range 0 b). An exception is raised if the modulus b is zero. This is summarised in the following table.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"remainder division sign rounding\nrem div/divrem same as dividend towards zero\nmod  same as divisor towards -infty","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"There is no function implemented to compute the quotient corresponding to the remainder given by mod.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"mod(ZZ(4), ZZ(3))\nmod(ZZ(2), ZZ(0)) ","category":"page"},{"location":"Rings/integer/#integer_divisibility_testing","page":"Integers","title":"Divisibility testing","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divides(a::Oscar.Integer, b::Oscar.Integer) -> (Bool, Oscar.Integer)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"In Oscar, we say that b divides a if there exists c in the same ring such that a = bc.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The call divides(a, b) returns a tuple (flag, q) where flag is either true if b divides a in which case q will be a quotient, or flag is false if b does not divide a in which case q will be an integer whose value is not defined.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divides(ZZ(6), ZZ(3))\ndivides(ZZ(5), ZZ(2))","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Note that for convenience we define:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divides(ZZ(0), ZZ(0))","category":"page"},{"location":"Rings/integer/#Greatest-common-divisor","page":"Integers","title":"Greatest common divisor","text":"","category":"section"},{"location":"Rings/integer/#Greatest-common-divisor-2","page":"Integers","title":"Greatest common divisor","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"gcd(a::Oscar.Integer, b::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"One or both arguments may be Julia integers, however if they both are, the result will be a Julia integer not an Oscar integer.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the greatest common divisor of its inputs, which is by definition the largest integer dividing the two inputs, unless both inputs are zero in which case it returns zero. The result will always be non-negative and will only be zero if both inputs are zero.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"gcd(ZZ(34), ZZ(17))\ngcd(ZZ(3), ZZ(0))","category":"page"},{"location":"Rings/integer/#Extended-GCD","page":"Integers","title":"Extended GCD","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"gcdx(a::Oscar.Integer, b::Oscar.Integer) -> (Oscar.Integer, Oscar.Integer, Oscar.Integer)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"One or both arguments may be Julia integers, however if they both are, the result will be a tuple of Julia integers not Oscar integers.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns a tuple (g s t) such that g is the greatest common divisor of a and b and g = as + bt. Normally s and t are chosen so that s  b(2g) and t  a(2g), where this uniquely defines s and t. But the following cases are handled specially:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"if a = b then t = bb\nif b = 0 or b = 2g then s = aa\nif a = 0 or a = 2g then t = bb","category":"page"},{"location":"Rings/integer/#Least-common-multiple","page":"Integers","title":"Least common multiple","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"lcm(a::Oscar.Integer, b::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"One or both arguments may be Julia integers, however if they both are, the result will be a Julia integer not an Oscar integer.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the least common multiple of a and b. This is the least positive multiple of a and b, unless a = 0 or b = 0 which case we define the least common multiple to be zero.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"lcm(ZZ(6), ZZ(21))\nlcm(ZZ(0), ZZ(0))","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nThe identity gcd(m n)mathrmlcm(m n) = mn does not hold for the definition that Oscar uses, unless both m and n are the same sign or one of them is zero.","category":"page"},{"location":"Rings/integer/#Roots","page":"Integers","title":"Roots","text":"","category":"section"},{"location":"Rings/integer/#Square-roots","page":"Integers","title":"Square roots","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Julia and Oscar distinguish two kinds of square root:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Integer square root (isqrt)\nFloating point square root (sqrt)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"We describe only the first of these here.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"isqrt(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the floor of the square root of its argument, i.e. the largest integer whose square does not exceed its input. An exception is raised if a negative input is passed.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"isqrt(ZZ(16))\nisqrt(ZZ(0))\nisqrt(ZZ(5))\nisqrt(ZZ(-3))","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"isqrtrem(n::Oscar.Integer) -> (Oscar.Integer, Oscar.Integer)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the tuple (s, r) such that s is equal to isqrt(n) and n = s^2 + r.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"isqrtrem(ZZ(16))\nisqrtrem(ZZ(5))","category":"page"},{"location":"Rings/integer/#General-roots","page":"Integers","title":"General roots","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"root(a::Oscar.Integer, n::Base.Int) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the value r of largest absolute value such that r^n leq a. When a is a perfect n-th power, the return value will be an n-th root of a.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"When n is even, the non-negative root is always returned. An exception is raised if n leq 0 or if n is even and a  0.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"root(ZZ(16), 4)\nroot(ZZ(5), 2)\nroot(ZZ(-5), 3)\nroot(ZZ(0), 4)\nroot(ZZ(-5), 2)\nroot(ZZ(12), -2)","category":"page"},{"location":"Rings/integer/#Conversions","page":"Integers","title":"Conversions","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Int(n::Oscar.Integer) -> Base.Int\nBigInt(n::Oscar.Integer) -> Base.BigInt","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Convert the Oscar integer to the respective Julia integer.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"n = ZZ(123)\nInt(n)\nBigInt(n)","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"In the case of Int, if the Oscar integer is too large to fit, an exception is raised.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Int(ZZ(12348732648732648763274868732687324))","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"fits(::Type{Int}, n::Oscar.Integer) -> Bool","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns true if the Oscar integer will fit in a Base.Int.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"fits(Int, ZZ(123))\nfits(Int, ZZ(12348732648732648763274868732687324))","category":"page"},{"location":"Rings/integer/#Factorisation","page":"Integers","title":"Factorisation","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"factor(n::Oscar.Integer) -> Fac","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns a factorisation of the given integer. The return value is a special factorisation struct which can be manipulated using the functions below.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"factor(ZZ(-6000361807272228723606))\nfactor(ZZ(0))","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"unit(F::Fac) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"F = factor(ZZ(-12))\nunit(F)","category":"page"},{"location":"Rings/integer/#Factorisation-are-iterable","page":"Integers","title":"Factorisation are iterable","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Once created, a factorisation is iterable:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"F = factor(ZZ(-60))\nfor (p, e) in F; println(\"$p^$e\"); end","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"The pairs (p, e) in a factorisation represent the prime power factors p^e of the non-unit part of the factorisation. They can be placed in an array using collect:","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"F = factor(ZZ(-60))\ncollect(F)","category":"page"},{"location":"Rings/integer/#Accessing-exponents-in-a-factorisation","page":"Integers","title":"Accessing exponents in a factorisation","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"One can also determine whether a given prime is in the non-unit part of a factorisation and if so return its exponent. If the exponent of a prime that is not in a factorisation is requested, an exception is raised.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"For convenience, a Base.Int can be used instead of an Oscar integer for this functionality.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"F = factor(ZZ(-60))\n5 in F\nZZ(3) in F\n7 in F\nF[3]\nF[ZZ(7)]","category":"page"},{"location":"Rings/integer/#Combinatorial-functions","page":"Integers","title":"Combinatorial functions","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nThe functions in this section that take Base.Int arguments will return a Base.Int, which may overflow. Use the Oscar.Integer versions if this is not the desired behaviour.","category":"page"},{"location":"Rings/integer/#Factorial","page":"Integers","title":"Factorial","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"factorial(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the factorial of n, i.e. n. An exception is raised if n  0. We define 0 = 1.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nThe function factorial is already defined in Julia for Base.Int.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"rising_factorial(x::Base.Int, n::Base.Int) -> Base.Int\nrising_factorial(x::Oscar.Integer, n::Base.Int) -> Oscar.Integer\nrising_factorial(x::Oscar.Integer, n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns x(x + 1)(x + 2)ldots(x + n - 1). An exception is raised if n  0. We define rising_factorial(x, 0) to be 1.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"factorial(ZZ(30))\nrising_factorial(ZZ(-30), 3)","category":"page"},{"location":"Rings/integer/#Primorial","page":"Integers","title":"Primorial","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"primorial(n::Base.Int) -> Base.Int\nprimorial(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the promorial P(n), i.e. the product of all primes less than or equal to n. An exception is raised if n  0. We define P(0) = P(1) = 1.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"primorial(ZZ(100))","category":"page"},{"location":"Rings/integer/#Bell-numbers","page":"Integers","title":"Bell numbers","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"bell(n::Base.Int) -> Base.Int\nbell(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the n-th Bell number B(n), i.e. the number of ways of partitioning a set of n elements. An exception is raised if n  0.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"bell(ZZ(20))","category":"page"},{"location":"Rings/integer/#Binomial-coefficients","page":"Integers","title":"Binomial coefficients","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"binomial(n::Oscar.Integer, k::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the binomial coefficient fracnk(n - k). If n k  0 or k  n we return zero.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nJulia already defines the binomial function for Base.Int.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"binomial(ZZ(72), ZZ(15))","category":"page"},{"location":"Rings/integer/#Integer-partitions","page":"Integers","title":"Integer partitions","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"number_of_partitions(n::Base.Int) -> Base.Int\nnumber_of_partitions(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the number of integer partitions p(n) of n, i.e. the number of distinct ways to write n as a sum of positive integers. Note that p(0) = 1, as the empty sum is counted. For n  0 we return zero.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"number_of_partitions(ZZ(10^6))","category":"page"},{"location":"Rings/integer/#Fibonacci-sequence","page":"Integers","title":"Fibonacci sequence","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"fibonacci(n::Base.Int) -> Base.Int\nfibonacci(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Returns the n-th Fibonacci number F(n), defined by the recurrence relation F(1) = 1, F(2) = 1 and F(n) = F(n - 1) + F(n - 2) for n geq 3. We define F(0) = 0 and for n  0 we have F(-n) = (-1)^n+1F(n).","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"fibonacci(ZZ(100))\nfibonacci(-2)","category":"page"},{"location":"Rings/integer/#Number-theoretic-functionality","page":"Integers","title":"Number theoretic functionality","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"note: Note\nThe functions in this section that take Base.Int arguments will return a Base.Int, which may overflow. Use the Oscar.Integer versions if this is not the desired behaviour.","category":"page"},{"location":"Rings/integer/#Moebius-mu-function","page":"Integers","title":"Moebius mu function","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"moebius_mu(n::Base.Int) -> Base.Int\nmoebius_mu(n::Oscar.Integer) -> Base.Int ","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Return the Moebius function mu(n), which is defined to be 0 if n is not squarefree and otherwise is defined to be +1 or -1 if n has an even or odd number of prime factors, respectively. Alternatively, mu(n) can be defined to be the sum of the primitive n-th roots of unity. An exception is raised if n leq 0.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"moebius_mu(30)","category":"page"},{"location":"Rings/integer/#Jacobi-symbols","page":"Integers","title":"Jacobi symbols","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"jacobi_symbol(m::Base.Int, n::Base.Int) -> Base.Int\njacobi_symbol(m::Oscar.Integer, n::Oscar.Integer) -> Base.Int","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Return the Jacobi symbol left(fracmnright), which is defined for integers m and odd, positive integers n. If the factorisation of n is n = p_1^i_1p_2^i_2ldots p_r^i_r then we define","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"left(fracmnright) = left(fracmp_1right)^i_1left(fracmp_2right)^i_2ldots left(fracmp_rright)^i_r","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"where left(fracmpright) on the right hand side is the Legendre symbol, which is defined for an odd prime number p to be 0 if p divides m and otherwise +1 or -1 depending on whether m is a square modulo p or not. An exception is raised if n is even or if n leq 0.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"jacobi_symbol(3, 37)","category":"page"},{"location":"Rings/integer/#Sigma-function","page":"Integers","title":"Sigma function","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divisor_sigma(m::Base.Int, n::Base.Int) -> Base.Int\ndivisor_sigma(m::Oscar.Integer, n::Base.Int) -> Oscar.Integer\ndivisor_sigma(m::Oscar.Integer, n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Return the sum of the n-th powers of the divisors of m","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"sigma(m n) = sum_dm d^n","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"If m leq 0 or n  0 we raise an exception.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"divisor_sigma(60, 5)","category":"page"},{"location":"Rings/integer/#Euler-totient-function","page":"Integers","title":"Euler totient function","text":"","category":"section"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"euler_phi(n::Base.Int) -> Base.Int\neuler_phi(n::Oscar.Integer) -> Oscar.Integer","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"Return the Euler totient function varphi(n), i.e. the number of positive integers 1 leq x leq n which are coprime to n. Note that varphi(1) = 1. We raise an exception if n leq 0.","category":"page"},{"location":"Rings/integer/","page":"Integers","title":"Integers","text":"euler_phi(200)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"CurrentModule = Oscar","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"using Oscar","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Pages = [\"groups.md\"]","category":"page"},{"location":"Groups/groups/#Groups","page":"Groups","title":"Groups","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Oscar supports the following types of groups:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"PermGroup = groups of permutations\nMatrixGroup = groups of matrices\nFPGroup = finitely presented groups\nPcGroup = polycyclic groups\nDirectProductOfGroups = direct product of two groups\nAutomorphismGroup = group of automorphisms over a group","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"If x is an element of the group G of type T, then the type of x is GAPGroupElement{T}.","category":"page"},{"location":"Groups/groups/#Basics","page":"Groups","title":"Basics","text":"","category":"section"},{"location":"Groups/groups/#elements_of_groups","page":"Groups","title":"Elements of groups","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Given a group G, it is always possible to have access to some particular elements.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"one(x::GAPGroup)\nrand(::GAPGroup)\nrand_pseudo(G::GAPGroup)\ngens(::GAPGroup)\ngens(::GAPGroup, i::Int)","category":"page"},{"location":"Groups/groups/#Base.one-Tuple{Oscar.GAPGroup}","page":"Groups","title":"Base.one","text":"one(G::Group) -> x::GAPGroupElem{typeof(G)}\n\nReturn the identity of the group G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Base.rand-Tuple{Oscar.GAPGroup}","page":"Groups","title":"Base.rand","text":"rand(G::Group)\n\nReturn a random element of the group G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.rand_pseudo-Tuple{Oscar.GAPGroup}","page":"Groups","title":"Oscar.rand_pseudo","text":"rand_pseudo(G::Group)\n\nReturn a random element of the group G. It works faster than rand, but the elements are not necessarily equally distributed.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#AbstractAlgebra.gens-Tuple{Oscar.GAPGroup}","page":"Groups","title":"AbstractAlgebra.gens","text":"gens(G::Group)\n\nReturn an array of generators of the group G. To access the array, it can be used the shorter notation G[i] instead of gens(G)[i].\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#AbstractAlgebra.gens-Tuple{Oscar.GAPGroup,Int64}","page":"Groups","title":"AbstractAlgebra.gens","text":"gens(G::Group, i::Integer)\n\nReturn the i-th element of the array gens(G). It is equivalent to G[i] and gens(G)[i]. If i is greater than the length of gens(G), an ERROR is returned.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"It is also possible to obtain the generators of G by typing","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"f1,f2,f3 = gens(G)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"This is equivalent to","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"f1=G[1]; f2=G[2]; f3=G[3];","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"If the group G has been created as the subgroup of another group generated by a list of elements L, then the generating set returned by the function gens corresponds to L.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"note: Note\nThe output of gens(G) is not, in general, the minimal list of generators for G.","category":"page"},{"location":"Groups/groups/#Operations","page":"Groups","title":"Operations","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Oscar supports the following operations and functions on group elements.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"* = multiplication between two elements in a group.\ninv(x) = x^-1 the inverse of x.\nx/y = the element xy^-1.\nx^n = the n-th power of x. If n = 0, the identity of the group is returned; if n  0, the -n-th power of the inverse of x is returned.\nisone(x): returns whether x is the identity of the group.\nconj(x,y) = x^y = the conjugate of x by y, i.e. the element y^-1xy.\ncomm(x,y) = the commutator of x and y, i.e. the element x^-1y^-1xy.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"note: Note\nIn Oscar, the expression x^y^z is equivalent to x^(y^z). In other words, conjugations are evaluated from the right to the left.","category":"page"},{"location":"Groups/groups/#subgroups","page":"Groups","title":"Subgroups","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The subgroup of a group G generated by the elements x,y,... is defined by the following instruction:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"sub(G, [x,y,...]) ;\nsub(x,y,...).","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"This function returns two objects: a group H, that is the subgroup of G generated by the elements x,y,..., and the embedding homomorphism of H into G. The object H has the same type of G, and it has no memory of the \"parent\" group G: it is an independent group.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Examples:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> G = symmetric_group(4); H = sub(G,[cperm([1,2,3]),cperm([2,3,4])]);\njulia> H[1] == alternating_group(4)\ntrue","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The following functions are available in Oscar for subgroup properties:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"issubgroup\nembedding(G::T, H::T) where T <: GAPGroup\nindex(G::T, H::T) where T <: GAPGroup\nisnormal(G::T, H::T) where T <: GAPGroup\nischaracteristic(G::T, H::T) where T <: GAPGroup","category":"page"},{"location":"Groups/groups/#Hecke.issubgroup","page":"Groups","title":"Hecke.issubgroup","text":"issubgroup(G::T, H::T) where T <: GAPGroup\n\nReturn (true,f) if H is a subgroup of G, where f is the embedding homomorphism of H into G, otherwise return (false,Nothing).\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.embedding-Union{Tuple{T}, Tuple{T,T}} where T<:Oscar.GAPGroup","page":"Groups","title":"Oscar.embedding","text":"embedding(G::T, H::T) where T <: GAPGroup\n\nReturn the embedding morphism of H into G. It throws ERROR if H is not a subgroup of G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Hecke.index-Union{Tuple{T}, Tuple{T,T}} where T<:Oscar.GAPGroup","page":"Groups","title":"Hecke.index","text":"index(G::T, H::T) where T <: GAPGroup\n\nReturn the index of H in G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Hecke.isnormal-Union{Tuple{T}, Tuple{T,T}} where T<:Oscar.GAPGroup","page":"Groups","title":"Hecke.isnormal","text":"isnormal(G::T, H::T) where T <: GAPGroup\n\nReturn whether the subgroup H is normal in G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Hecke.ischaracteristic-Union{Tuple{T}, Tuple{T,T}} where T<:Oscar.GAPGroup","page":"Groups","title":"Hecke.ischaracteristic","text":"ischaracteristic(G::T, H::T) where T <: GAPGroup\n\nReturn whether the subgroup H is characteristic in G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Standard-subgroups","page":"Groups","title":"Standard subgroups","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The following functions are available in Oscar to obtain standard subgroups of a group G. Every such function returns a tuple (H,f), where H is a group of the same type of G and f is the embedding homomorphism of H into G.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"trivial_subgroup\ncentre\nsylow_subgroup(G::GAPGroup, p::Int64)\nhall_subgroup(G::GAPGroup, P::AbstractVector{<:Base.Integer})\nderived_subgroup\nfitting_subgroup(G::GAPGroup)\nfrattini_subgroup(G::GAPGroup)\nradical_subgroup(G::GAPGroup)\nsocle(G::GAPGroup)","category":"page"},{"location":"Groups/groups/#Oscar.trivial_subgroup","page":"Groups","title":"Oscar.trivial_subgroup","text":"trivial_subgroup(G::GAPGroup)\n\nReturn the trivial subgroup of G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.centre","page":"Groups","title":"Oscar.centre","text":"centre(G::Group)\n\nReturn the centre of G, i.e. the subgroup of all x in G such that xy=yx for every y in G, together with its embedding morphism into G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.sylow_subgroup-Tuple{Oscar.GAPGroup,Int64}","page":"Groups","title":"Oscar.sylow_subgroup","text":"sylow_subgroup(G::Group, p::Int64)\n\nReturn a Sylow p-subgroup of G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.hall_subgroup-Tuple{Oscar.GAPGroup,AbstractArray{#s263,1} where #s263<:Integer}","page":"Groups","title":"Oscar.hall_subgroup","text":"hall_subgroup(G::Group, P::Array{Int64})\n\nReturn a Hall P-subgroup of G. It works only if G is solvable.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.derived_subgroup","page":"Groups","title":"Oscar.derived_subgroup","text":"derived_subgroup(G::GAPGroup)\n\nReturn the derived subgroup of G, i.e. the subgroup generated by all commutators of G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.fitting_subgroup-Tuple{Oscar.GAPGroup}","page":"Groups","title":"Oscar.fitting_subgroup","text":"fitting_subgroup(G::GAPGroup)\n\nReturn the Fitting subgroup of G, the largest nilpotent normal subgroup of G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.frattini_subgroup-Tuple{Oscar.GAPGroup}","page":"Groups","title":"Oscar.frattini_subgroup","text":"frattini_subgroup(G::GAPGroup)\n\nReturn the Frattini subgroup of G, the intersection of all maximal subgroups of G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.radical_subgroup-Tuple{Oscar.GAPGroup}","page":"Groups","title":"Oscar.radical_subgroup","text":"radical_subgroup(G::GAPGroup)\n\nReturn the radical subgroup of G, the largest solvable normal subgroup of G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.socle-Tuple{Oscar.GAPGroup}","page":"Groups","title":"Oscar.socle","text":"socle(G::GAPGroup)\n\nReturn the socle of G, the subgroup generated by all minimal normal subgroups of G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The following functions return a list of subgroups.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"subgroups(G::GAPGroup)\nnormal_subgroups\nmaximal_subgroups\nmaximal_normal_subgroups\nminimal_normal_subgroups\ncharacteristic_subgroups\nderived_series\nsylow_system\nhall_system","category":"page"},{"location":"Groups/groups/#Hecke.subgroups-Tuple{Oscar.GAPGroup}","page":"Groups","title":"Hecke.subgroups","text":"subgroups(G::Group)\n\nReturn the list of subgroups of G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.normal_subgroups","page":"Groups","title":"Oscar.normal_subgroups","text":"normal_subgroups(G::Group)\n\nReturn the list of normal subgroups of G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.maximal_subgroups","page":"Groups","title":"Oscar.maximal_subgroups","text":"maximal_subgroups(G::Group)\n\nReturn the list of maximal subgroups of G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.maximal_normal_subgroups","page":"Groups","title":"Oscar.maximal_normal_subgroups","text":"maximal_normal_subgroups(G::Group)\n\nReturn the list of maximal normal subgroups of G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.minimal_normal_subgroups","page":"Groups","title":"Oscar.minimal_normal_subgroups","text":"minimal_normal_subgroups(G::Group)\n\nReturn the list of minimal normal subgroups of G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.characteristic_subgroups","page":"Groups","title":"Oscar.characteristic_subgroups","text":"characteristic_subgroups(G::Group)\n\nReturn the list of characteristic subgroups of G, i.e. the subgroups that are invariant under all automorphisms of G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Hecke.derived_series","page":"Groups","title":"Hecke.derived_series","text":"derived_series(G::GAPGroup)\n\nReturn the list [G_1, G_2, G_3, ... ], where G_1=G and G_{i+1} = derived_subgroup(G_i).\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.sylow_system","page":"Groups","title":"Oscar.sylow_system","text":"sylow_system(G::Group)\n\nReturn an array of Sylow p-subgroups of G, where p runs over the prime factors of |G|, such that every two such subgroups commute each other (as subgroups). It works only if G is solvable.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.hall_system","page":"Groups","title":"Oscar.hall_system","text":"hall_system(G::Group)\n\nReturn an array of P-Hall subgroups of G, where P runs over the subsets of prime factors of |G|. It works only if G is solvable.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"note: Note\nWhen a function returns a list of subgroups, the output consists in the subgroups only; the embeddings are not returned as well. To get the embedding homomorphism of the subgroup H in G, one has to type embedding(G,H)","category":"page"},{"location":"Groups/groups/#quotient","page":"Groups","title":"Quotients","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Quotient groups in Oscar can be defined using the instruction quo in two ways.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Quotients by normal subgroups.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"quo(G::T, H::T) where T <: GAPGroup","category":"page"},{"location":"Groups/groups/#AbstractAlgebra.quo-Union{Tuple{T}, Tuple{T,T}} where T<:Oscar.GAPGroup","page":"Groups","title":"AbstractAlgebra.quo","text":"quo(G::T, H::T)\n\nReturn the quotient group G/H of type PcGroup (if the quotient group is solvable) or PermGroup (otherwise), together with the projection G -> G/H.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Quotients by elements.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"quo(G::T, elements::Vector{S}) where T <: GAPGroup where S <: GAPGroupElem","category":"page"},{"location":"Groups/groups/#AbstractAlgebra.quo-Union{Tuple{T}, Tuple{S}, Tuple{T,Array{S,1}}} where T<:Oscar.GAPGroup where S<:GAPGroupElem","page":"Groups","title":"AbstractAlgebra.quo","text":"quo(G::T, elements::Vector{S})\n\nReturn the quotient group G/H of type FPGroup (if T=FPGroup), PcGroup (if the quotient group is solvable) or PermGroup (otherwise), where H is the normal closure of elements in G.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"This is the typical way to build finitely presented groups.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Example:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> F=free_group(2);\njulia> (f1,f2)=gens(F);\njulia> G=quo(F,[f1^2,f2^3,(f1*f2)^2])[1];\njulia> isisomorphic(G,symmetric_group(3))[1]\ntrue","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Similarly to the subgroups, the output consists of a pair (Q,p), where Q is the quotient group and p is the projection homomorphism of G into Q.","category":"page"},{"location":"Groups/groups/#Permutation-groups","page":"Groups","title":"Permutation groups","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Permutation groups can be defined as symmetric groups, alternating groups or their subgroups.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"symmetric_group\nalternating_group","category":"page"},{"location":"Groups/groups/#Oscar.symmetric_group","page":"Groups","title":"Oscar.symmetric_group","text":"symmetric_group(n::Int64)\nsymmetric_group(::Type{T}, n::Int)\n\nReturn the full symmetric group over a set of n elements. The group is returned of type T for T in {PermGroup, PcGroup}. If T is not specified, then T is set as PermGroup.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.alternating_group","page":"Groups","title":"Oscar.alternating_group","text":"alternating_group(n::Int64)\nalternating_group(::Type{T}, n::Int)\n\nReturn the full alternating group over a set of n elements. The group is returned of type T for T in {PermGroup, PcGroup}. If T is not specified, then T is set as PermGroup.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"In Oscar, every permutation group has a degree n, that corresponds to the size of the set on which G acts. This can be displayed by typing","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"degree(G)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"note: Note\nThe degree of a group of permutations is not necessarily equal to the largest moved point of the group G. For example, the trivial subgroup of symmetric_group(n) has degree n even though it fixes n.","category":"page"},{"location":"Groups/groups/#Permutations","page":"Groups","title":"Permutations","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Permutations in Oscar are displayed as products of disjoint cycles, as in GAP. An explicit permutation can be built using the functions perm, gap_perm and cperm.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"perm\ngap_perm\ncperm","category":"page"},{"location":"Groups/groups/#AbstractAlgebra.Generic.perm","page":"Groups","title":"AbstractAlgebra.Generic.perm","text":"perm(G::PermGroup, L::AbstractVector{<:Integer})\n(G::PermGroup)(L::AbstractVector{<:Integer})\n\nReturn the permutation x which maps every i from 1 to length(L) to L[i]. L must contain every integer from 1 to length(L) exactly, otherwise an exception is thrown. The parent of x is G. If x is not contained in G, an ERROR is returned. For gap_perm, the parent group of x is set as Sym(n), where n is the largest moved point of x. Example:\n\njulia> perm(symmetric_group(6),[2,4,6,1,3,5])\n(1,2,4)(3,6,5)\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.gap_perm","page":"Groups","title":"Oscar.gap_perm","text":"gap_perm(L::AbstractVector{<:Integer})\n\nReturn the permutation x which maps every i from 1 to length(L) to L[i]. L must contain every integer from 1 to length(L) exactly, otherwise an exception is thrown. The parent of x is set as Sym(n).\n\njulia> gap_perm([2,4,6,1,3,5])\n(1,2,4)(3,6,5)\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.cperm","page":"Groups","title":"Oscar.cperm","text":"cperm(L::AbstractVector{<:Integer}...)\ncperm(G::PermGroup, L::AbstractVector{<:Integer}...)\n\nFor given lists of positive integers [a_1, a_2, ..., a_n],[b_1, b_2, ... , b_m], ... return the permutation x = (a_1,a_2,...,a_n)(b_1,b_2,...,b_m).... The array [n,n+1,...,n+k] can be replaced by n:n+k.\n\nIf a list is empty or contains duplicates, it fails. The parent of x is G. If x is not contained in G, an ERROR is returned. If G is not specified, then the parent of x is set as Sym(n), where n is the largest moved point of x. Example:\n\njulia> cperm([1,2,3],4:7)\n(1,2,3)(4,5,6,7)\n\njulia> cperm([1,2],[2,3])\n(1,3,2)\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Example:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> perm(symmetric_group(6),[2,4,6,1,3,5])\n(1,2,4)(3,6,5)\n\njulia> cperm([1,2,3],4:7)\n(1,2,3)(4,5,6,7)\n\njulia> cperm([1,2],[2,3])\n(1,3,2)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"At the moment, the input vectors of the function cperm need not to be disjoint.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"warning: Warning\nIf the function perm is evaluated in a vector of integers without specifying the group G, then the returned value is an element of the AbstractAlgebra.jl type Perm{Int}. For this reason, if one wants a permutation of type GAPGroupElem{PermGroup} without specifying a parent, one has to use the function gap_perm.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Every permutation has always a permutation group as a parent. Two permutations coincide if, and only if, they move the same points and their parent groups have the same degree.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> G=symmetric_group(5);\njulia> A=alternating_group(5);\njulia> x=cperm(G,[1,2]);\njulia> y=cperm(A,[1,2]);\njulia> z=cperm([1,2]);\njulia> x==y\ntrue\n\njulia> x==z\nfalse","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"In the example above, x and y are equal because both act on a set of cardinality 5, while x and z are different because x belongs to Sym(5) and z belongs to Sym(2).","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"If G is a group and x is a permutation, it is possible to set G as parent of x simply typing G(x). This returns the permutation x as element of G (or ERROR if x does not embed into G).","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"G=symmetric_group(5);\nx=cperm([1,2,3]);\ny=G(x);\nparent(x)\nparent(y)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The function listperm works in the opposite way with respect to perm:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"listperm","category":"page"},{"location":"Groups/groups/#Oscar.listperm","page":"Groups","title":"Oscar.listperm","text":"listperm(x::PermGroupElem)\n\nReturn the list L defined by L = [ x(i) for i in 1:n ], where n is the degree of parent(x).\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Permutations-as-functions","page":"Groups","title":"Permutations as functions","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"A permutation can be viewed as a function on the set {1,...,n}, hence it can be evaluated on integers.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"note: Note\nThe multiplication between permutations works from the left to the right. So, if x and y are permutations and n is an integer, then (x*y)(n) = (y(x(n)), NOT x(y(n)).","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> x = cperm([1,2,3,4,5]);\njulia> x(2)\n3","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"This works also if the argument is not in the range 1:n; in such a case, the output coincides with the input.","category":"page"},{"location":"Groups/groups/#Polycyclic-groups","page":"Groups","title":"Polycyclic groups","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Julia has the following functions that allow to generate polycyclic groups:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"abelian_group(::Type{T}, v::Vector{Int}) where T <: GAPGroup\ncyclic_group\ndihedral_group\nquaternion_group","category":"page"},{"location":"Groups/groups/#Hecke.abelian_group-Union{Tuple{T}, Tuple{Type{T},Array{Int64,1}}} where T<:Oscar.GAPGroup","page":"Groups","title":"Hecke.abelian_group","text":"abelian_group(::Type{T}, v::Vector{Int}) where T <: Group -> PcGroup\n\nReturn the direct product of cyclic groups of order v[1] x v[2] x ... x v[n], as group of type T. Here, T must be of type PermGroup, FPGroup or PcGroup.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.cyclic_group","page":"Groups","title":"Oscar.cyclic_group","text":"cyclic_group(::Type{T}, n::Int)\n\nReturn the cyclic group of order n and type T. If the type is not specified, the group is returned of type PcGroup.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.dihedral_group","page":"Groups","title":"Oscar.dihedral_group","text":"dihedral_group(n::Int)\ndihedral_group(::Type{T}, n::Int)\n\nReturn the dihedral group of order n of type T, where T is in {PcGroup,PermGroup,FPGroup}. In the first case, the type is set as PcGroup.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.quaternion_group","page":"Groups","title":"Oscar.quaternion_group","text":"quaternion_group(n::Int)\nquaternion_group(::Type{T}, n::Int)\n\nReturn the quaternion group of order n of type T, where T is in {PcGroup,PermGroup,FPGroup,MatrixGroup}. In the first case, the type is set as PcGroup.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"warning: Warning\nThe type need to be specified in the input of the function abelian_group, otherwise a group of type GrpAbFinGen is returned, which is not a GAP group type. In future versions of Oscar, this may change.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The generators of a polycyclic group are displayed as f1, f2, f3, etc., and every element of a polycyclic group is displayed as product of such generators.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Example:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> G=abelian_group(PcGroup, [2,4]);\njulia> G[1], G[2]\n(f1, f2)\njulia> G[2]*G[1]\nf1*f2","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Note that this does not define Julia variables named f1, f2, etc.! To get the generators of the group G, use gens(G); for convenience they can also be accessed as G[1], G[2], as shown in Section Elements of groups.","category":"page"},{"location":"Groups/groups/#Homomorphisms","page":"Groups","title":"Homomorphisms","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"In Oscar, a group homomorphism from G to H is an object of parametric type GAPGroupHomomorphism{S,T}, where S and T are the types of G and H respectively.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"A homomorphism from G to H can be defined in two ways.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Writing explicitly the images of the generators of G:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"f = hom(G,H,[x1,x2,...],[y1,y2,...])","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Here, [x1,x2,...] must be a generating set for G (not necessarily minimal) and [y1,y2,...] is a vector of elements of H of the same length of [x1,x2,...]. This assigns to f the value of the group homomorphism sending x_i into y_i. If such a homomorphism does not exist, an error is returned.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Taking an existing function g satisfying the group homomorphism properties:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"f = hom(G,H,g)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"If the function g does not satisfy the group homomorphism properties, an error is returned.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Example: The following procedures define the same homomorphism (conjugation by x) in the two ways explained above.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> S=symmetric_group(4);\njulia> x=S[1];\njulia> f=hom(S,S,gens(S),[S[1]^x,S[2]^x]);\njulia> g=hom(S,S,y->y^x);\njulia> f==g\ntrue","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Oscar has also the following standard homomorphism.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"id_hom\ntrivial_morphism","category":"page"},{"location":"Groups/groups/#Hecke.id_hom","page":"Groups","title":"Hecke.id_hom","text":"id_hom(G::GAPGroup)\n\nReturn the identity homomorphism on the group G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Oscar.trivial_morphism","page":"Groups","title":"Oscar.trivial_morphism","text":"trivial_morphism(G::GAPGroup, H::GAPGroup)\n\nReturn the homomorphism from G to H sending every element of G into the identity of H. If H is not specified, it is taken equal to G.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"To evaluate the homomorphism f in the element x of G, it is possible to use the instruction","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"image(f,x)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"or the more compact notations f(x) and x^f.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Example:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> S=symmetric_group(4);\njulia> f=hom(S,S,x->x^S[1]);\njulia> x=cperm(S,[1,2]);\njulia> image(f,x)\n(2,3)\njulia> f(x)\n(2,3)\njulia> x^f\n(2,3)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"A sort of \"inverse\" of the evaluation is the following","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"haspreimage(f::GAPGroupHomomorphism, x::GAPGroupElem)","category":"page"},{"location":"Groups/groups/#Hecke.haspreimage-Tuple{Oscar.GAPGroupHomomorphism,GAPGroupElem}","page":"Groups","title":"Hecke.haspreimage","text":"haspreimage(f::GAPGroupHomomorphism, x::GAPGroupElem)\n\nReturn (true,y) if there exists y such that f(y) = x; otherwise, return (false,1).\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Example:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> S=symmetric_group(4);\njulia> f=hom(S,S,x->x^S[1]);\njulia> x=cperm(S,[1,2]);\njulia> haspreimage(f,x)\n(true,(1,4))","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"warning: Warning\nDo not confuse haspreimage with the function has_preimage, which works on variable of type GrpGenToGrpGenMor.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"A further function that produces isomorphisms is isisomorphic:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"isisomorphic(G::GAPGroup, H::GAPGroup)","category":"page"},{"location":"Groups/groups/#AbstractAlgebra.Generic.isisomorphic-Tuple{Oscar.GAPGroup,Oscar.GAPGroup}","page":"Groups","title":"AbstractAlgebra.Generic.isisomorphic","text":"isisomorphic(G::Group, H::Group)\n\nReturn (true,f) if G and H are isomorphic groups, where f is a group isomorphism. Otherwise, return (false,f), where f is the trivial homomorphism.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Operations-on-homomorphisms","page":"Groups","title":"Operations on homomorphisms","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Oscar supports the following operations on homomorphisms.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"inv(f) = the inverse of f. An error is returned if f is not bijective.\nf^n = the homomorphism f composed n times with itself. An error is returned if the domain and the codomain of f do not coincide (unless n=1). If n is negative, the result is the inverse of f composed n times with itself.\ncompose(g,f) = composition of g and f. This works only if the codomain of g coincide with the domain of f. Shorter equivalent expressions are g*f and f(g).\nExample:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> S=symmetric_group(4);\njulia> f=hom(S,S,x->x^S[1]);\njulia> g=hom(S,S,x->x^S[2]);\njulia> f*g==hom(S,S,x->x^(S[1]*S[2]))\ntrue\njulia> f==f^-3\ntrue","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"note: Note\nThe composition operation * has to be read from the right to the left. So, (f*g)(x) is equivalent to g(f(x)).","category":"page"},{"location":"Groups/groups/#Properties-of-homomorphisms","page":"Groups","title":"Properties of homomorphisms","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Oscar implements the following attributes of homomorphisms.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"domain\ncodomain\nisinjective(f::GAPGroupHomomorphism)\nissurjective(f::GAPGroupHomomorphism)\nisbijective(f::GAPGroupHomomorphism)\nisinvertible(f::GAPGroupHomomorphism)\nisinvariant(f::GAPGroupHomomorphism, H::GAPGroup)","category":"page"},{"location":"Groups/groups/#AbstractAlgebra.Generic.domain","page":"Groups","title":"AbstractAlgebra.Generic.domain","text":"domain(f::GAPGroupHomomorphism)\n\nReturn the domain of f.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#AbstractAlgebra.Generic.codomain","page":"Groups","title":"AbstractAlgebra.Generic.codomain","text":"codomain(f::GAPGroupHomomorphism)\n\nReturn the codomain of f.\n\n\n\n\n\n","category":"function"},{"location":"Groups/groups/#Hecke.isinjective-Tuple{Oscar.GAPGroupHomomorphism}","page":"Groups","title":"Hecke.isinjective","text":"isinjective(f::GAPGroupHomomorphism)\n\nReturn whether f is injective.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Hecke.issurjective-Tuple{Oscar.GAPGroupHomomorphism}","page":"Groups","title":"Hecke.issurjective","text":"issurjective(f::GAPGroupHomomorphism)\n\nReturn whether f is surjective.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Hecke.isbijective-Tuple{Oscar.GAPGroupHomomorphism}","page":"Groups","title":"Hecke.isbijective","text":"isbijective(f::GAPGroupHomomorphism)\n\nReturn whether f is bijective.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Hecke.isinvertible-Tuple{Oscar.GAPGroupHomomorphism}","page":"Groups","title":"Hecke.isinvertible","text":"isinvertible(f::GAPGroupHomomorphism)\n\nReturn whether f is invertible.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.isinvariant-Tuple{Oscar.GAPGroupHomomorphism,Oscar.GAPGroup}","page":"Groups","title":"Oscar.isinvariant","text":"isinvariant(f::GAPGroupHomomorphism, H::Group)\nisinvariant(f::GAPGroupElem{AutomorphismGroup{T}}, H::T)\n\nReturn whether f(H) == H.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Subgroups-described-by-homomorphisms","page":"Groups","title":"Subgroups described by homomorphisms","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The following functions compute subgroups or quotients of either the domain or the codomain. Analogously to the functions described in Sections Subgroups and Quotients, the output consists of a pair (H, g), where H is a subgroup (resp. quotient) and g is its embedding (resp. projection) homomorphism.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"kernel(f::GAPGroupHomomorphism)\nimage(f::GAPGroupHomomorphism)\nimage(f::GAPGroupHomomorphism{S, T}, H::S) where S <: GAPGroup where T <: GAPGroup\ncokernel(f::GAPGroupHomomorphism)\npreimage(f::GAPGroupHomomorphism{S, T}, H::T) where S <: GAPGroup where T <: GAPGroup","category":"page"},{"location":"Groups/groups/#AbstractAlgebra.Generic.kernel-Tuple{Oscar.GAPGroupHomomorphism}","page":"Groups","title":"AbstractAlgebra.Generic.kernel","text":"kernel(f::GAPGroupHomomorphism)\n\nReturn the kernel of f, together with its embedding into domain(f).\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#AbstractAlgebra.Generic.image-Tuple{Oscar.GAPGroupHomomorphism}","page":"Groups","title":"AbstractAlgebra.Generic.image","text":"image(f::GAPGroupHomomorphism)\n\nReturn the image of f as subgroup of codomain(f), together with the embedding homomorphism.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#AbstractAlgebra.Generic.image-Union{Tuple{S}, Tuple{T}, Tuple{Oscar.GAPGroupHomomorphism{S,T},S}} where S<:Oscar.GAPGroup where T<:Oscar.GAPGroup","page":"Groups","title":"AbstractAlgebra.Generic.image","text":"image(f::GAPGroupHomomorphism{S, T}, H::S) where S <: GAPGroup where T <: GAPGroup\n(f::GAPGroupHomomorphism{S, T})(H::S)\n\nReturn f(H), together with the embedding homomorphism into codomain(f).\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Hecke.cokernel-Tuple{Oscar.GAPGroupHomomorphism}","page":"Groups","title":"Hecke.cokernel","text":"cokernel(f::GAPGroupHomomorphism)\n\nReturn the cokernel of f, that is, the quotient of the codomain of f by the normal closure of the image.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#AbstractAlgebra.Generic.preimage-Union{Tuple{S}, Tuple{T}, Tuple{Oscar.GAPGroupHomomorphism{S,T},T}} where S<:Oscar.GAPGroup where T<:Oscar.GAPGroup","page":"Groups","title":"AbstractAlgebra.Generic.preimage","text":"preimage(f::GAPGroupHomomorphism{S, T}, H::T) where S <: GAPGroup where T <: GAPGroup\n\nIf H is a subgroup of the codomain of f, return the subgroup f^-1(H), together with its embedding homomorphism into the domain of f.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Automorphisms-groups","page":"Groups","title":"Automorphisms groups","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Groups of automorphisms over a group G have parametric type AutomorphismGroup{T}, where T is the type of G. The group of automorphisms over a group G is defined by the following instruction:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"automorphism_group(G)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The evaluation of the automorphism f in the element x is analogous to the homomorphism evaluation: it can be obtained by typing either f(x) or x^f.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"It is possible to turn an automorphism f into a homomorphism by typing hom(f). The viceversa is also possible: if g is a bijective homomorphism from the group G to itself and A is the automorphism group of G, then the instruction A(g) returns g as automorphism of G. This is the standard way to build explicitly an automorphism (another way, available for inner automorphisms, is shown in Section Inner_automorphisms).","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Example:","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"julia> S=symmetric_group(4);\njulia> A=automorphism_group(S);\njulia> g=hom(S,S,x->x^S[1]);\njulia> g in A\nfalse\njulia> au=A(g);\njulia> au in A\ntrue\njulia> g=hom(au)\ntrue\njulia> x=cperm(S,[1,2,3]);\njulia> au(x)\n(2,3,4)\njulia> g(x)==au(x)\ntrue","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"In Oscar it is possible to multiply homomorphisms and automorphisms (whenever it makes sense); in such cases, the output is always a variable of type GAPGroupHomomorphism{S,T}.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"S=symmetric_group(4);\nA=automorphism_group(S);\ng=hom(S,S,x->x^S[1]);\nf=A(g);\ntypeof(g*f)","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"The following functions are available for automorphisms, some of them similar to the corresponding functions for homomorphisms of groups.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"isinvariant(f::GAPGroupElem{AutomorphismGroup{T}}, H::T) where T<:GAPGroup\nrestrict_automorphism(f::GAPGroupElem{AutomorphismGroup{T}}, H::T, A=automorphism_group(H)) where T <: GAPGroup\ninduced_automorphism(f::GAPGroupHomomorphism, mH::GAPGroupHomomorphism)","category":"page"},{"location":"Groups/groups/#Oscar.isinvariant-Union{Tuple{T}, Tuple{GAPGroupElem{AutomorphismGroup{T}},T}} where T<:Oscar.GAPGroup","page":"Groups","title":"Oscar.isinvariant","text":"isinvariant(f::GAPGroupElem{AutomorphismGroup{T}}, H::T)\n\nReturn whether f(H) == H.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.restrict_automorphism-Union{Tuple{T}, Tuple{GAPGroupElem{AutomorphismGroup{T}},T}, Tuple{GAPGroupElem{AutomorphismGroup{T}},T,Any}} where T<:Oscar.GAPGroup","page":"Groups","title":"Oscar.restrict_automorphism","text":"restrict_automorphism(f::GAPGroupElem{AutomorphismGroup{T}}, H::T)\n\nIf H is invariant under f, returns the restriction of f to H as automorphism of H; otherwise it returns ERROR.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.induced_automorphism-Tuple{Oscar.GAPGroupHomomorphism,Oscar.GAPGroupHomomorphism}","page":"Groups","title":"Oscar.induced_automorphism","text":"induced_automorphism(f::GAPGroupHomomorphism, g::GAPGroupHomomorphism)\ninduced_automorphism(f::GAPGroupHomomorphism, g::GAPGroupElem{AutomorphismGroup{T}})\n\nReturn the automorphism h of the image of f such that h(f) == f(g), where g is an automorphism of a group G and f is a group homomorphism defined over G such that the kernel of f is invariant under g\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#inner_automorphisms","page":"Groups","title":"Inner automorphisms","text":"","category":"section"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"Oscar disposes of the following functions to handle inner automorphisms of a group.","category":"page"},{"location":"Groups/groups/","page":"Groups","title":"Groups","text":"inner_automorphism(g::GAPGroupElem)\nisinner_automorphism(f::GAPGroupHomomorphism)\ninner_automorphisms_group(A::AutomorphismGroup{T}) where T <: GAPGroup","category":"page"},{"location":"Groups/groups/#Oscar.inner_automorphism-Tuple{GAPGroupElem}","page":"Groups","title":"Oscar.inner_automorphism","text":"inner_automorphism(g::GAPGroupElem)\n\nReturn the inner automorphism in automorphism_group(parent(g)) defined by x -> x^g.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.isinner_automorphism-Tuple{Oscar.GAPGroupHomomorphism}","page":"Groups","title":"Oscar.isinner_automorphism","text":"isinner_automorphism(f::GAPGroupHomomorphism)\nisinner_automorphism(f::GAPGroupElem{AutomorphismGroup{T}})\n\nReturn whether f is an inner automorphism.\n\n\n\n\n\n","category":"method"},{"location":"Groups/groups/#Oscar.inner_automorphisms_group-Union{Tuple{AutomorphismGroup{T}}, Tuple{T}} where T<:Oscar.GAPGroup","page":"Groups","title":"Oscar.inner_automorphisms_group","text":"inner_automorphisms_group(A::AutomorphismGroup{T})\n\nReturn the subgroup of A of the inner automorphisms.\n\n\n\n\n\n","category":"method"}]
}
